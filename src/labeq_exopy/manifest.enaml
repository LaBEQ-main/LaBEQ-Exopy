# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2015-2018 by ExopyHqcLegacy Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""The manifest contributing the extensions to the main application.

"""
import os

import enaml
from enaml.workbench.api import PluginManifest, Extension
from exopy.app.api import AppStartup 
from exopy.tasks.api import Tasks, Task, Interface
from  exopy.tasks.filters import GroupTaskFilter
from exopy.instruments.api import (Starter, Connection, Drivers, Driver, Settings)

from .instruments.starters.legacy_starter import (VisaLegacyStarter,
                                                  DllLegacyStarter)


enamldef LaBEQManifest(PluginManifest):
    """The manifest declaring the extension points to the Exopy.

    """
    id = 'labeq_exopy'

    Extension:
        id = 'filters'
        point = 'exopy.tasks.filters'
        GroupTaskFilter:
            id = 'MercuryiPS'
            group = 'MercuryiPS'
        GroupTaskFilter:
            id = 'MercuryiTC'
            group = 'MercuryiTC'
        GroupTaskFilter:
            id = 'Lock-in Amplifier'
            group = 'Lock-in Amplifier'
        GroupTaskFilter:    
            id = 'NF LI5650'
            group = 'NF LI5650'
        GroupTaskFilter:
            id = 'NF ZM2376'
            group = 'NF ZM2376'
        GroupTaskFilter:    
            id = 'YokogawaGS200'
            group = 'YokogawaGS200'
        GroupTaskFilter:    
            id = 'GWINSTEKGDS1054B'
            group = 'GWINSTEKGDS1054B'
        GroupTaskFilter:    
            id = 'Lakeshore'
            group = 'Lakeshore'
        GroupTaskFilter:
            id = 'KeysightEDUX1052G'
            group = 'KeysightEDUX1052G'

    Extension:
        id = 'startup'
        point = 'exopy.app.startup'
        AppStartup:
            id = 'labeq_exopy.instruments.directories'
            priority = 50
            run => (workbench, cmd_args):
                core = workbench.get_plugin('enaml.workbench.core')
                state = core.invoke_command('exopy.app.states.get',
                                            {'state_id': 'exopy.app.directory'})

                h_dir = os.path.join(state.app_directory, 'instruments',
                                     'connections', 'headers')
                # Create instruments subfolder if it does not exist.
                if not os.path.isdir(h_dir):
                    os.makedirs(h_dir)

                l_dir = os.path.join(state.app_directory, 'instruments',
                                     'connections', 'dll')
                # Create instruments subfolder if it does not exist.
                if not os.path.isdir(l_dir):
                    os.makedirs(l_dir)

    Extension:
        id = 'instruments.starters'
        point = 'exopy.instruments.starters'
        Starter:
            id = 'labeq_exopy.starter.visa'
            description = ('Starter for legacy instrument relying on the VISA '
                          'protocol')
            starter = VisaLegacyStarter()

        Starter:
            id = 'labeq_exopy.starter.dll'
            description = ('Starter for legacy instruments using a custom dll '
                           'for communication.')
            starter = DllLegacyStarter()

    Extension:
        id = 'instruments.connections'
        point = 'exopy.instruments.connections'
        Connection:
            id = 'LegacyDLLConnection'
            description = ('Connection for instruments communicating via a '
                           'DLL and identified by their serial number.')
            new => (workbench, defaults, read_only):
                with enaml.imports():
                    from .instruments.connections.dll_serial_number_connection\
                        import DLLConnection
                defaults = dict(lib_dir=defaults.get('lib_dir', ''),
                                serial_number=defaults.get('serial_number',
                                                           ''),
                                header_dir=defaults.get('header_dir',''))
                return DLLConnection(read_only=read_only, declaration=self,
                                     workbench=workbench, **defaults)

    Extension:
        id = 'instruments.settings'
        point = 'exopy.instruments.settings'
        Settings:
            id = 'MagnetConversionSetting'
            description = ('Magnet-dependent field to current ratio that need '
                           'to be specified for field sources.')
            new => (workbench, defaults, read_only):
                with enaml.imports():
                    from .instruments.settings.magnet_conversion_setting\
                        import MagnetConversionSetting
                mc = defaults.get('magnet_conversion', '0.')
                uid = defaults.get('user_id', '')
                widget = MagnetConversionSetting(workbench=workbench,
                                                 user_id=uid,
                                                 magnet_conversion=mc)
                widget.read_only = read_only
                return widget

    Extension:
        id = 'instruments.drivers'
        point = 'exopy.instruments.drivers'
        Drivers:
            path = 'labeq_exopy.instruments.drivers'
            architecture = 'Legacy'
            Drivers:
                path = 'visa'
                starter = 'labeq_exopy.starter.visa'
                Drivers:
                    manufacturer = 'NF Corporation'
                    Driver:
                        driver = 'NF_LI5650_driver:LI5650'
                        model = 'LI5650'
                        connections = {'VisaTCPIP': {'resource_class': 'INSTR'}}
                    
                    Driver:
                        driver = 'NF_ZM2376_driver:ZM2376'
                        model = 'ZM2376'
                        connections = {'VisaGPIB': {'resource_class': 'INSTR'}}

                Drivers:
                    manufacturer = 'LakeShore Cryotronics'
                    Driver:
                        driver = 'Lakeshore_TC340:LakeshoreTC340'
                        model ='340'
                        kind = 'Other'
                        connections = {'VisaGPIB': {'resource_class': 'INSTR'},
                                       'VisaRS232':{'resource_class': 'INSTR'}
                                        }
                Drivers:
                    manufacturer = 'LaBEQ'
                    Driver:
                        driver = 'Timer_driver:Timer'
                        model = 'Timer'
                        connections = {'VisaGPIB': {'resource_class': 'INSTR'}}
                Drivers:
                    manufacturer = 'Keysight'
                    Driver:
                        driver = 'agilent_multimeters:Agilent34410A'
                        model = '34410A'
                        kind = 'Multimeter'
                        connections = {'VisaGPIB': {'resource_class': 'INSTR'},
                                       'VisaUSB': {'resource_class': 'INSTR'},
                                       'VisaTCPIP': {'resource_class': 'INSTR'}
                                       }
                    Driver:
                        driver = 'agilent_pna:AgilentPNA'
                        model = 'PNA'
                        connections = {'VisaGPIB': {'resource_class': 'INSTR'},
                                       'VisaUSB': {'resource_class': 'INSTR'},
                                       'VisaTCPIP': {'resource_class': 'INSTR'}
                                       }
                    Driver:
                        driver = 'agilent_psg_signal_generators:AgilentPSG'
                        serie = 'PSG'
                        model = 'E8257D'
                        kind = 'RF source'
                        connections = {'VisaGPIB': {'resource_class': 'INSTR'},
                                       'VisaUSB': {'resource_class': 'INSTR'},
                                       'VisaTCPIP': {'resource_class': 'INSTR'}
                                       }
                Drivers:
                    manufacturer = 'Yokogawa'
                    Driver:
                        driver = 'yokogawa:YokogawaGS200'
                        model = 'GS200'
                        kind = 'DC source'
                        connections = { 'VisaGPIB': {'resource_class': 'INSTR'},
                                        'VisaTCPIP': {'resource_class': 'INSTR'},
                                        'VisaUSB': {'resource_class': 'INSTR',
                                                   'manufacturer_id': '0xB21',
                                                   'model_code': '0x39'},
                                       }
                    Driver:
                        driver = 'yokogawa:Yokogawa7651'
                        model = '7651'
                        kind = 'DC source'
                        connections = {'VisaGPIB': {'resource_class': 'INSTR'},
                                       'VisaRS232':
                                           {'resource_class': 'INSTR'}
                                       }
                Drivers:
                    manufacturer = 'Keithley'
                    Driver:
                        driver = 'keithley_multimeters:Keithley2000'
                        model = '2000'
                        kind = 'Multimeter'
                        connections = {'VisaGPIB': {'resource_class': 'INSTR'},
                                       'VisaRS232':
                                           {'resource_class': 'INSTR'}
                                       }
                    Driver:
                        driver = 'KeithleyDMM6500DigitMultimeter_driver:Keithley6500'    #Jake Addition
                        model = '6500'
                        kind = 'Multimeter'
                        connections = {'VisaTCPIP':
                                           {'port': 5025,
                                            'resource_class': 'SOCKET'}
                                       }
                Drivers:
                    manufacturer = 'GW Instek'
                    Driver:
                        driver = 'GWINSTEKGDS1054B_driver:GWINSTEKGDS1054B'    #Jake Addition
                        model = '1054B'
                        kind = 'Other' 
                        #Kind value does not matter. BUT,
                        #this variable may only be assiged a value defined within your exopy package. 
                        #At default, the possible vals are: 'Other', 'DC source', 'AWG', 'RF source', 'Lock-in',
                        #'Spectrum analyser', 'Multimeter'. 
                        connections = {'VisaTCPIP':
                                           {'port': 3000,
                                            'resource_class': 'SOCKET'}
                                       }
                Drivers:
                    manufacturer = 'Keithley'
                    Driver:
                        driver = 'keithley_multimeters:Keithley2001'
                        model = '2001'
                        kind = 'Multimeter'
                        connections = {'VisaGPIB': {'resource_class': 'INSTR'},
                                       'VisaRS232':
                                           {'resource_class': 'INSTR'}
                                       }
                Drivers:
                    manufacturer = 'Keithley'
                    Driver:
                        driver = 'keithley_multimeters:Keithley2400'
                        model = '2400'
                        kind = 'Multimeter'
                        connections = {'VisaGPIB': {'resource_class': 'INSTR'},
                                       'VisaRS232':
                                           {'resource_class': 'INSTR'}
                                       }
                Drivers:
                    manufacturer = 'Oxford'
                    Driver:
                        driver = 'oxford_ips:IPS12010'
                        model  = 'IPS120-10'
                        connections = {'VisaGPIB': {'resource_class': 'INSTR'},
                                       'VisaRS232': {'resource_class': 'INSTR'}
                                       }
                    Driver:
                        driver = 'oxford_mercuryips:MercuryiPS'
                        model = 'MercuryiPS'
                        connections =   {'VisaTCPIP': 
                                            {'port': 7020,
                                            'resource_class': 'SOCKET'}
                                        }
                    Driver:
                        driver = 'Oxford_MercuryiTC_driver:MercuryiTC'
                        model = 'MercuryiTC'
                        connections =   {'VisaTCPIP': 
                                            {'port': 7020,
                                            'resource_class': 'SOCKET'}
                                        }
                Drivers:
                    manufacturer = 'Cryomagnetics'
                    settings = {'MagnetConversionSetting': {}}
                    Driver:
                        driver = 'cryomagnetics_cs4:CS4'
                        model  = 'CS4-10V/100'
                        connections = {'VisaGPIB': {'resource_class': 'INSTR'},
                                       'VisaRS232': {'resource_class': 'INSTR'}
                                       }
                Drivers:
                    manufacturer = 'Cryomagnetics'
                    settings = {'MagnetConversionSetting': {}}
                    Driver:
                        driver = 'cryomagnetics_g4:C4G'
                        model  = '4G-100'
                        connections = {'VisaGPIB': {'resource_class': 'INSTR'},
                                       'VisaRS232': {'resource_class': 'INSTR'}
                                       }
                Drivers:
                    manufacturer = 'Tektronix'
                    Driver:
                        driver = 'tektro_awg:AWG'
                        model = 'AWG5014C'
                        kind = 'AWG'
                        connections = {'VisaGPIB': {'resource_class': 'INSTR'},
                                       'VisaUSB': {'resource_class': 'INSTR'},
                                       'VisaTCPIP': {'resource_class': 'INSTR',
                                                     'lan_device_name': 'inst0'}
                                       }
                Drivers:
                    manufacturer = 'Signal recovery'
                    Driver:
                        driver = 'lock_in_sr72_series:LockInSR7265'
                        model = '7265'
                        kind = 'Lock-in'
                        connections = {'VisaGPIB': {'resource_class': 'INSTR'},
                                       'VisaRS232':
                                           {'resource_class': 'INSTR'}
                                       }
                    Driver:
                        driver = 'lock_in_sr72_series:LockInSR7270'
                        model = '7270'
                        kind = 'Lock-in'
                        connections = {'VisaTCPIP':
                                           {'port': 50000,
                                            'resource_class': 'SOCKET'}
                                       }
                Drivers:
                    manufacturer = 'Anritsu'
                    Driver:
                        driver = 'anritsu_signal_source:AnritsuMG3694'
                        model = 'MG3694'
                        kind = 'RF source'
                        connections = {'VisaGPIB': {'resource_class': 'INSTR'},
                                       'VisaTCPIP': {'resource_class': 'INSTR',
                                                     'lan_device_name': 'inst0'},
                                       'VisaRaw': {}
                                       }

                Drivers:
                    manufacturer = 'WindfreakTech'
                    Driver:
                        driver = 'windfreaktech_synthHD_signal_generator:SynthHD'
                        model = 'SynthHD'
                        kind = 'RF source'
                        connections = {'VisaRS232':
                                           {'resource_class': 'INSTR'}
                                       }
                Drivers:
                    manufacturer = 'Bilt'
                    Driver:
                        driver = 'tinybuilt:TinyBilt'
                        model = 'BN100'
                        kind = 'DC source'
                        connections = {'VisaGPIB': {'resource_class': 'INSTR'},
                                       'VisaUSB': {'resource_class': 'INSTR'},
                                       'VisaTCPIP': {'resource_class': 'INSTR'}
                                       }
                Drivers:
                    manufacturer = 'Standford instruments'
                    Driver:
                        driver = 'lock_in_sr830:LockInSR830'
                        model = 'SR830'
                        kind = 'Lock-in'
                        connections = {'VisaGPIB': {'resource_class': 'INSTR'},
                                       'VisaRS232':{'resource_class': 'INSTR'}
                                       }
                    Driver:
                        driver = 'lock_in_sr810:LockInSR810'
                        model = 'SR810'
                        kind = 'Lock-in'
                        connections = {'VisaGPIB': {'resource_class': 'INSTR'},
                                       'VisaRS232':{'resource_class': 'INSTR'}
                                       }

                Drivers:
                    manufacturer = 'Rohde and Schwarz'
                    Driver:
                        driver = 'rohde_and_schwarz_vna:ZNB20'
                        model = 'ZNB20'
                        connections = {'VisaGPIB': {'resource_class': 'INSTR'},
                                       'VisaTCPIP': {'resource_class': 'INSTR'}
                                       }
                    Driver:
                        driver = 'rohde_and_schwarz_zva24:ZVA24'
                        model = 'ZVA24'
                        connections = {'VisaTCPIP': {'resource_class': 'INSTR'}
                                       }
                    Driver:
                        driver = ('rohde_and_schwarz_signal_generators:'
                                  'RohdeSchwarzSMB100A')
                        model = 'SMB100A'
                        kind = 'RF source'
                        connections = {'VisaTCPIP': {'resource_class': 'INSTR'}
                                        }
                Drivers:
                    manufacturer = 'Anapico'
                    Driver:
                        driver = 'anapico:Anapico'
                        model = 'APSING20G'
                        connections = {'VisaTCPIP': {'resource_class': 'INSTR'}
                                       }
                    Driver:
                        driver = 'anapico:AnapicoMulti'
                        model = 'APUASYN20'
                        connections = {'VisaTCPIP': {'resource_class': 'INSTR'}
                                       }
                Drivers:
                    manufacturer = 'Keysight'
                    Driver:
                        driver = 'keysight_edux1052g:KeysightEDUX1052G'
                        model ='EDUX1052G'
                        connections = {'VisaGPIB': {'resource_class': 'INSTR'},
                                       }

            Drivers:
                path = 'dll'
                starter = 'labeq_exopy.starter.dll'
                connections = {'LegacyDLLConnection': {}}
                Driver:
                    driver = 'sp_adq14:SPADQ14'
                    manufacturer = 'SPDevices'
                    model = 'ADQ14'

                Driver:
                    driver = 'alazar935x:Alazar935x'
                    manufacturer = 'AlazarTech'
                    model = 'ATS9350'
            
            #####################################################


    Extension:
        id = 'labeq_exopy.tasks'
        point = 'exopy.tasks.declarations'
        Tasks:
            path = 'labeq_exopy.tasks.tasks'
            Tasks:
                path = 'util'
                group = 'util'
                Task:
                    task = 'array_tasks:ArrayExtremaTask'
                    view = 'views.array_views:ArrayExtremaView'
                Task:
                    task = 'array_tasks:ArrayFindValueTask'
                    view = 'views.array_views:ArrayFindValueView'
                Task:
                    task = 'load_tasks:LoadArrayTask'
                    view = 'views.load_views:LoadArrayView'
                    Interface:
                        interface = 'load_tasks:CSVLoadInterface'
                        views = ['views.load_views:CSVLoadInterfaceView']
                    Interface:
                        interface = 'load_tasks:H5PYLoadInterface'
                        views = ['views.load_views:H5PYLoadInterfaceView']
                Task:
                    task = 'save_tasks:SaveTask'
                    view = 'views.save_views:SaveView'
                    metadata = {'loopable': True}
                Task:
                    task = 'save_tasks:SaveFileTask'
                    view = 'views.save_views:SaveFileView'
                Task:
                    task = 'save_tasks:SaveFileHDF5Task'
                    view = 'views.save_views:SaveFileHDF5View'
                Task:
                    task = 'save_tasks:SaveArrayTask'
                    view = 'views.save_views:SaveArrayView'

            Tasks:
                path = 'instr'
                group = 'instr'
                Task:
                    task = 'Timer_tasks:InitiateTimer'
                    view = 'views.simple_task_view:SimpleTaskView'
                    instruments = ['labeq_exopy.Legacy.Timer']
                    metadata = {'loopable': True}
                Task:
                    task = 'Timer_tasks:GetElapsedTime'
                    view = 'views.simple_task_view:SimpleTaskView'
                    instruments = ['labeq_exopy.Legacy.Timer']
                    metadata = {'loopable': True}
                Task:
                    task = 'Timer_tasks:GetTimeStamp'
                    view = 'views.simple_task_view:SimpleTaskView'
                    instruments = ['labeq_exopy.Legacy.Timer']
                    metadata = {'loopable': True}
                Tasks:
                    group = 'NF ZM2376'
                    Task:
                        task = 'NF_ZM2376_tasks:ZM2376_SetFrequencyTask'
                        view = 'views.NF_ZM2376_views:SetFrequencyView'
                        instruments =   ['labeq_exopy.Legacy.ZM2376']
                        metadata = {'loopable': True}
                    Task:
                        task = 'NF_ZM2376_tasks:ZM2376_MeasureTask'
                        view = 'views.NF_ZM2376_views:MeasureView'
                        instruments =   ['labeq_exopy.Legacy.ZM2376']
                        metadata = {'loopable': True}
                        
                Tasks:
                    group = 'NF LI5650'
                    Task:
                        task = 'NF_LI5650_tasks:SetSensAndDynResrvTask'
                        view = 'views.NF_LI5650_views:SetSensAndDynResrvView'
                        instruments =   ['labeq_exopy.Legacy.LI5650']
                        metadata = {'loopable': True}
                    Task:
                        task = 'NF_LI5650_tasks:SetTimeConstantTask'
                        view = 'views.NF_LI5650_views:SetTimeConstantView'
                        instruments =   ['labeq_exopy.Legacy.LI5650']
                        metadata = {'loopable': True}
                    Task:
                        task = 'NF_LI5650_tasks:SetInputAndRefTask'
                        view = 'views.NF_LI5650_views:SetInputAndRefView'
                        instruments =   ['labeq_exopy.Legacy.LI5650']
                        metadata = {'loopable': True}
                    Task:
                        task = 'NF_LI5650_tasks:NFLockInMeasureTask'
                        view = 'views.NF_LI5650_views:MeasureView'
                        instruments =   ['labeq_exopy.Legacy.LI5650']
                        metadata = {'loopable': True}
                Tasks:
                    group = 'MercuryiPS'
                    Task:
                        task = 'MercuryiPS_tasks:ReadSupplyFieldTask'
                        view = 'views.simple_task_view:SimpleTaskView'
                        instruments =   ['labeq_exopy.Legacy.MercuryiPS']
                        metadata = {'loopable': True}
                
                    Task:
                        task = 'MercuryiPS_tasks:ReadSupplyFieldRateTask'
                        view = 'views.simple_task_view:SimpleTaskView'
                        instruments =   ['labeq_exopy.Legacy.MercuryiPS']
                        metadata = {'loopable': True}
                    Task:
                        task = 'MercuryiPS_tasks:ReadMagnetFieldTask'
                        view = 'views.simple_task_view:SimpleTaskView'
                        instruments =   ['labeq_exopy.Legacy.MercuryiPS']
                        metadata = {'loopable': True}
                    Task:
                        task = 'MercuryiPS_tasks:ReadSupplyVoltageTask'
                        view = 'views.simple_task_view:SimpleTaskView'
                        instruments =   ['labeq_exopy.Legacy.MercuryiPS']
                        metadata = {'loopable': True}
                    Task:
                        task = 'MercuryiPS_tasks:ReadSupplyCurrentTask'
                        view = 'views.simple_task_view:SimpleTaskView'
                        instruments =   ['labeq_exopy.Legacy.MercuryiPS']
                        metadata = {'loopable': True}
                    Task:
                        task = 'MercuryiPS_tasks:ReadSupplyCurrentRateTask'
                        view = 'views.simple_task_view:SimpleTaskView'
                        instruments =   ['labeq_exopy.Legacy.MercuryiPS']
                        metadata = {'loopable': True}
                    Task:
                        task = 'MercuryiPS_tasks:ReadMagnetCurrentTask'
                        view = 'views.simple_task_view:SimpleTaskView'
                        instruments =   ['labeq_exopy.Legacy.MercuryiPS']
                        metadata = {'loopable': True}
                    Task:
                        task = 'MercuryiPS_tasks:ReadTargetCurrentTask'
                        view = 'views.simple_task_view:SimpleTaskView'
                        instruments =   ['labeq_exopy.Legacy.MercuryiPS']
                        metadata = {'loopable': True}
                    Task:
                        task = 'MercuryiPS_tasks:SetTargetCurrentTask'
                        view = 'views.MercuryiPS_views:SetTargetCurrentView'
                        instruments =   ['labeq_exopy.Legacy.MercuryiPS']
                        metadata = {'loopable': True}
                    Task:
                        task = 'MercuryiPS_tasks:ReadTargetCurrentRateTask'
                        view = 'views.simple_task_view:SimpleTaskView'
                        instruments =   ['labeq_exopy.Legacy.MercuryiPS']
                        metadata = {'loopable': True}
                    Task:
                        task = 'MercuryiPS_tasks:SetTargetCurrentRateTask'
                        view = 'views.MercuryiPS_views:SetTargetCurrentRateView'
                        instruments =   ['labeq_exopy.Legacy.MercuryiPS']
                        metadata = {'loopable': True}
                    Task:
                        task = 'MercuryiPS_tasks:ReadTargetFieldTask'
                        view = 'views.simple_task_view:SimpleTaskView'
                        instruments =   ['labeq_exopy.Legacy.MercuryiPS']
                        metadata = {'loopable': True}
                    Task:
                        task = 'MercuryiPS_tasks:SetTargetFieldTask'
                        view = 'views.MercuryiPS_views:SetTargetFieldView'
                        instruments =   ['labeq_exopy.Legacy.MercuryiPS']
                        metadata = {'loopable': True}
                    Task:
                        task = 'MercuryiPS_tasks:ReadTargetFieldRateTask'
                        view = 'views.simple_task_view:SimpleTaskView'
                        instruments =   ['labeq_exopy.Legacy.MercuryiPS']
                        metadata = {'loopable': True}
                    Task:
                        task = 'MercuryiPS_tasks:SetTargetFieldRateTask'
                        view = 'views.MercuryiPS_views:SetTargetFieldRateView'
                        instruments =   ['labeq_exopy.Legacy.MercuryiPS']
                        metadata = {'loopable': True}
                    Task:
                        task = 'MercuryiPS_tasks:ReadSwitchHeaterStatusTask'
                        view = 'views.simple_task_view:SimpleTaskView'
                        instruments =   ['labeq_exopy.Legacy.MercuryiPS']
                        metadata = {'loopable': True}
                    Task:
                        task = 'MercuryiPS_tasks:RampToTargetTask'
                        view = 'views.MercuryiPS_views:RampToTargetView'
                        instruments =   ['labeq_exopy.Legacy.MercuryiPS']
                        metadata = {'loopable': True}
                    Task:
                        task = 'MercuryiPS_tasks:ReadTempSensorTask'
                        view = 'views.MercuryiPS_views:ReadTempSensorView'
                        instruments =   ['labeq_exopy.Legacy.MercuryiPS']
                        metadata = {'loopable': True}
                    Task:
                        task = 'MercuryiPS_tasks:HoldFieldTask'
                        view = 'views.simple_task_view:SimpleTaskView'
                        instruments =   ['labeq_exopy.Legacy.MercuryiPS']
                        metadata = {'loopable': True}
                Tasks:
                    group = 'MercuryiTC'
                    Task:
                        task = 'MercuryiTC_tasks:ReadVTITemperatureTask'
                        view = 'views.simple_task_view:SimpleTaskView'
                        instruments =   ['labeq_exopy.Legacy.MercuryiTC']
                        metadata = {'loopable': True}
                    Task:
                        task = 'MercuryiTC_tasks:SetVTITemperatureTask'
                        view = 'views.MercuryiTC_views:SetTemperatureView'
                        instruments =   ['labeq_exopy.Legacy.MercuryiTC']
                        metadata = {'loopable': True}
                    Task:
                        task = 'MercuryiTC_tasks:ReadProbeTemperatureTask'
                        view = 'views.simple_task_view:SimpleTaskView'
                        instruments =   ['labeq_exopy.Legacy.MercuryiTC']
                        metadata = {'loopable': True}
                    Task:
                        task = 'MercuryiTC_tasks:SetProbeTemperatureTask'
                        view = 'views.MercuryiTC_views:SetTemperatureView'
                        instruments =   ['labeq_exopy.Legacy.MercuryiTC']
                        metadata = {'loopable': True}
                    Task:
                        task = 'MercuryiTC_tasks:ReadVTIPressureTask'
                        view = 'views.simple_task_view:SimpleTaskView'
                        instruments =   ['labeq_exopy.Legacy.MercuryiTC']
                        metadata = {'loopable': True}
                    Task:
                        task = 'MercuryiTC_tasks:SetVTIPressureTask'
                        view = 'views.MercuryiTC_views:SetVTIPressureView'
                        instruments =   ['labeq_exopy.Legacy.MercuryiTC']
                        metadata = {'loopable': True}
                    Task:
                        task = 'MercuryiTC_tasks:ReadVTIValvePercentageTask'
                        view = 'views.simple_task_view:SimpleTaskView'
                        instruments =   ['labeq_exopy.Legacy.MercuryiTC']
                        metadata = {'loopable': True}
                Tasks:
                    group = "Lock-in Amplifier"
                    Task:
                        task = 'lock_in_measure_task:LockInMeasureTask'
                        view = 'views.lock_in_meas_view:LockInMeasView'
                        instruments = ['labeq_exopy.Legacy.LockInSR7265',
                                    'labeq_exopy.Legacy.LockInSR830',
                                    'labeq_exopy.Legacy.LockInSR810']
                        #metadata = {'loopable': True}
                    Task:
                        task = 'sr810_SetGainAndTimeConst_task:LockInSetGainAndTimeConstTask'
                        view = 'views.sr810_SetGainAndTimeConst_view:LockInSetGainAndTimeConstView'
                        instruments = ['labeq_exopy.Legacy.LockInSR830',
                                        'labeq_exopy.Legacy.LockInSR810']
                    Task:
                        task = 'sr810_SetInputAndRef_task:LockInSetInputAndRefTask'
                        view = 'views.sr810_SetInputAndRef_view:LockInSetInputAndRefView'
                        instruments = ['labeq_exopy.Legacy.LockInSR830',
                                        'labeq_exopy.Legacy.LockInSR810']
                Task:
                    task = 'set_voltage_compliance_tasks:SetVoltageComplianceTask'
                    view = 'views.set_voltage_compliance_views:SetVoltageComplianceView'
                    instruments = ['labeq_exopy.Legacy.Keithley2400']
                    metadata = {'loopable': True}
                Task:
                    task = 'set_current_compliance_tasks:SetCurrentComplianceTask'
                    view = 'views.set_current_compliance_views:SetCurrentComplianceView'
                    instruments = ['labeq_exopy.Legacy.Keithley2400']
                    metadata = {'loopable': True}
                Task:
                    task = 'source_dcvoltage_tasks:SourceDCVoltageTask'
                    view = 'views.source_dcvoltage_views:SourceDCVoltView'
                    instruments = ['labeq_exopy.Legacy.Keithley2400',
                                    'labeq_exopy.Legacy.YokogawaGS200']
                    metadata = {'loopable': True}
                Task:
                    task = 'source_dccurrent_tasks:SourceDCCurrentTask'
                    view = 'views.source_dccurrent_views:SourceDCCurrentView'
                    instruments = ['labeq_exopy.Legacy.Keithley2400',
                                    'labeq_exopy.Legacy.YokogawaGS200']
                    metadata = {'loopable': True}
                Task:
                    task = 'meas_dc_tasks:MeasDCVoltageTask'
                    view = 'views.meas_dc_views:MeasDCVoltView'
                    instruments = ['labeq_exopy.Legacy.Keithley2000',
                                   'labeq_exopy.Legacy.Keithley2001',
                                   'labeq_exopy.Legacy.Keithley2400',
                                   'labeq_exopy.Legacy.Agilent34410A',
                                   'labeq_exopy.Legacy.Yokogawa7651',
                                   'labeq_exopy.Legacy.YokogawaGS200',
                                   'labeq_exopy.Legacy.Keithley2400',
                                   'labeq_exopy.Legacy.Keithley6500']

                Task:
                    task = 'meas_dccurrent_tasks:MeasDCCurrentTask'
                    view = 'views.simple_measurement_view:SimpleMeasView'
                    instruments = ['labeq_exopy.Legacy.Keithley2001',
                                   'labeq_exopy.Legacy.Keithley2400',
                                   'labeq_exopy.Legacy.Keithley6500',
                                   'labeq_exopy.Legacy.YokogawaGS200']
                    metadata = {'loopable': True}
                Task:
                    task = 'meas_two_res_tasks:MeasTwoResistanceTask'
                    view = 'views.simple_measurement_view:SimpleMeasView'
                    instruments = ['labeq_exopy.Legacy.Keithley2001',
                                    'labeq_exopy.Legacy.Keithley2400',
                                    'labeq_exopy.Legacy.Keithley6500',
                                    'labeq_exopy.Legacy.YokogawaGS200']
                    metadata = {'loopable' : True}
                    Interface:
                        interface = ('meas_two_res_tasks:Keithley2400MeasTwoResistanceInterface')
                        views = ['views.keithley2400_resistance_measurement_view:SourceModeLabel',
                                 'views.keithley2400_resistance_measurement_view:SourceModeValue',
                                 'views.keithley2400_resistance_measurement_view:SourceTypeLabel',
                                 'views.keithley2400_resistance_measurement_view:SourceTypeValue',
                                 'views.keithley2400_resistance_measurement_view:VoltageComplianceLabel',
                                 'views.keithley2400_resistance_measurement_view:VoltageComplianceValue',
                                 'views.keithley2400_resistance_measurement_view:CurrentComplianceLabel',
                                 'views.keithley2400_resistance_measurement_view:CurrentComplianceValue']
                        instruments = ['labeq_exopy.Legacy.Keithley2400',
                                        'labeq_exopy.Legacy.Keithley6500',
                                        'labeq_exopy.Legacy.YokogawaGS200']
                Task:
                    task = 'meas_four_res_tasks:MeasFourResistanceTask'
                    view = 'views.simple_measurement_view:SimpleMeasView'
                    instruments = ['labeq_exopy.Legacy.Keithley2001',
                                    'labeq_exopy.Legacy.Keithley6500',
                                    'labeq_exopy.Legacy.YokogawaGS200']
                    metadata = {'loopable' : True}
                    Interface:
                        interface = ('meas_four_res_tasks:Keithley2400MeasFourResistanceInterface')
                        views = ['views.keithley2400_resistance_measurement_view:SourceModeLabel',
                                 'views.keithley2400_resistance_measurement_view:SourceModeValue',
                                 'views.keithley2400_resistance_measurement_view:SourceTypeLabel',
                                 'views.keithley2400_resistance_measurement_view:SourceTypeValue',
                                 'views.keithley2400_resistance_measurement_view:VoltageComplianceLabel',
                                 'views.keithley2400_resistance_measurement_view:VoltageComplianceValue',
                                 'views.keithley2400_resistance_measurement_view:CurrentComplianceLabel',
                                 'views.keithley2400_resistance_measurement_view:CurrentComplianceValue']
                        instruments = ['labeq_exopy.Legacy.Keithley2400',
                                        'labeq_exopy.Legacy.Keithley6500']
                Task:
                    task = 'meas_acvoltage_tasks:MeasACVoltageTask'
                    view = 'views.simple_measurement_view:SimpleMeasView'
                    instruments = ['labeq_exopy.Legacy.Keithley2001',
                                    'labeq_exopy.Legacy.Keithley2400',
                                    'labeq_exopy.Legacy.Keithley6500']
                    metadata = {'loopable': True}
                Task:
                    task = 'meas_accurrent_tasks:MeasACCurrentTask'
                    view = 'views.simple_measurement_view:SimpleMeasView'
                    instruments = ['labeq_exopy.Legacy.Keithley2001',
                                    'labeq_exopy.Legacy.Keithley6500']
                    metadata = {'loopable': True}
                Task:
                    task = 'Keithley6500_tasks:SetRange'
                    view = 'views.set_range_views:SetRangeView'
                    instruments = ['labeq_exopy.Legacy.Keithley6500']
                    metadata = {'loopable': True}
                Task:
                    task = 'rf_tasks:SetRFFrequencyTask'
                    view = 'views.rf_views:RFFrequencyView'
                    instruments = ['labeq_exopy.Legacy.AgilentPSG',
                                   'labeq_exopy.Legacy.AnritsuMG3694',
                                   'labeq_exopy.Legacy.LabBrickLMS103',
                                   'labeq_exopy.Legacy.RohdeSchwarzSMB100A',
                                   'labeq_exopy.Legacy.Anapico']
                    metadata = {'loopable': True}
                    Interface:
                        interface = 'pna_tasks:PNASetRFFrequencyInterface'
                        views = ['views.pna_task_views:IPNAChannelLabel',
                                 'views.pna_task_views:IPNAChannelValue']
                        instruments = ['labeq_exopy.Legacy.AgilentPNA',
                                       'labeq_exopy.Legacy.ZNB20',
                                       'labeq_exopy.Legacy.ZVA24']
                    Interface:
                        interface = 'synthHD_tasks:SynthHDsetChannelInterface'
                        views = ['views.synthHD_task_views:ISynthHDChannelLabel',
                                 'views.synthHD_task_views:ISynthHDChannelValue']
                        instruments = ['labeq_exopy.Legacy.SynthHD']
                    Interface:
                        interface = 'anapico_tasks:AnapicoSetChannelInterface'
                        views = ['views.anapico_task_views:IAnapicoChannelLabel',
                                 'views.anapico_task_views:IAnapicoChannelValue']
                        instruments = ['labeq_exopy.Legacy.AnapicoMulti']
                Task:
                    task = 'rf_tasks:SetRFPowerTask'
                    view = 'views.rf_views:RFPowerView'
                    instruments = ['labeq_exopy.Legacy.AgilentPSG',
                                   'labeq_exopy.Legacy.AnritsuMG3694',
                                   'labeq_exopy.Legacy.LabBrickLMS103',
                                   'labeq_exopy.Legacy.RohdeSchwarzSMB100A',
                                   'labeq_exopy.Legacy.Anapico']
                    metadata = {'loopable': True}
                    Interface:
                        interface = 'pna_tasks:PNASetRFPowerInterface'
                        views = ['views.pna_task_views:IPNAChannelLabel',
                                 'views.pna_task_views:IPNAChannelValue',
                                 'views.pna_task_views:IPNAPortLabel',
                                 'views.pna_task_views:IPNAPortValue']
                        instruments = ['labeq_exopy.Legacy.AgilentPNA',
                                       'labeq_exopy.Legacy.ZNB20',
                                       'labeq_exopy.Legacy.ZVA24']
                    Interface:
                        interface = 'synthHD_tasks:SynthHDsetChannelInterface'
                        views = ['views.synthHD_task_views:ISynthHDChannelLabel',
                                 'views.synthHD_task_views:ISynthHDChannelValue']
                        instruments = ['labeq_exopy.Legacy.SynthHD']
                    Interface:
                        interface = 'anapico_tasks:AnapicoSetChannelInterface'
                        views = ['views.anapico_task_views:IAnapicoChannelLabel',
                                 'views.anapico_task_views:IAnapicoChannelValue']
                        instruments = ['labeq_exopy.Legacy.AnapicoMulti']
                Task:
                    task = 'rf_tasks:SetRFOnOffTask'
                    view = 'views.rf_views:RFSetOnOffView'
                    instruments = ['labeq_exopy.Legacy.AgilentPSG',
                                   'labeq_exopy.Legacy.AnritsuMG3694',
                                   'labeq_exopy.Legacy.LabBrickLMS103',
                                   'labeq_exopy.Legacy.RohdeSchwarzSMB100A',
                                   'labeq_exopy.Legacy.ZNB20',
                                   'labeq_exopy.Legacy.ZVA24',
                                   'labeq_exopy.Legacy.Anapico']
                    metadata = {'loopable': True}
                    Interface:
                        interface = 'synthHD_tasks:SynthHDsetChannelInterface'
                        views = ['views.synthHD_task_views:ISynthHDChannelLabel',
                                 'views.synthHD_task_views:ISynthHDChannelValue']
                        instruments = ['labeq_exopy.Legacy.SynthHD']
                    Interface:
                        interface = 'anapico_tasks:AnapicoSetChannelInterface'
                        views = ['views.anapico_task_views:IAnapicoChannelLabel',
                                 'views.anapico_task_views:IAnapicoChannelValue']
                        instruments = ['labeq_exopy.Legacy.AnapicoMulti']
                Task:
                    task = 'rf_tasks:SetPulseModulationTask'
                    view = 'views.rf_views:PulseModulationView'
                    instruments = ['labeq_exopy.Legacy.RohdeSchwarzSMB100A',
                                   'labeq_exopy.Legacy.Anapico']
                    Interface:
                        interface = 'anapico_tasks:AnapicoSetChannelInterface'
                        views = ['views.anapico_task_views:IAnapicoChannelLabel',
                                 'views.anapico_task_views:IAnapicoChannelValue']
                        instruments = ['labeq_exopy.Legacy.AnapicoMulti']
                Task:
                    task = 'pna_tasks:PNASinglePointMeasureTask'
                    view = 'views.pna_task_views:PNASinglePointView'
                    instruments = ['labeq_exopy.Legacy.AgilentPNA',
                                   'labeq_exopy.Legacy.ZNB20',
                                   'labeq_exopy.Legacy.ZVA24']
                Task:
                    task = 'pna_tasks:PNASweepTask'
                    view = 'views.pna_task_views:PNASweepMeasView'
                    instruments = ['labeq_exopy.Legacy.AgilentPNA',
                                   'labeq_exopy.Legacy.ZNB20',
                                   'labeq_exopy.Legacy.ZVA24']
                Task:
                    task = 'pna_tasks:PNAGetTraces'
                    view = 'views.pna_task_views:PNAGetTraceView'
                    instruments = ['labeq_exopy.Legacy.AgilentPNA',
                                   'labeq_exopy.Legacy.ZNB20',
                                   'labeq_exopy.Legacy.ZVA24']
                Task:
                    task = 'pna_tasks:ZNBGetTraces'
                    view = 'views.pna_task_views:ZNBGetTraceView'
                    instruments = ['labeq_exopy.Legacy.ZNB20',
                                   'labeq_exopy.Legacy.ZVA24']
                Task:
                    task = 'dc_tasks:SetDCVoltageTask'
                    view = 'views.dc_views:SetDcVoltageView'
                    instruments = ['labeq_exopy.Legacy.YokogawaGS200',
                                   'labeq_exopy.Legacy.Yokogawa7651']
                    metadata = {'loopable': True}
                    Interface:
                        interface = ('dc_tasks:'
                                     'MultiChannelVoltageSourceInterface')
                        views = ['views.dc_views:'
                                 'MultiChannelVoltageSourceILabelModule',
								 'views.dc_views:'
                                 'MultiChannelVoltageSourceIModule',
                                 'views.dc_views:'
                                 'MultiChannelVoltageSourceILabel',
                                 'views.dc_views:'
                                 'MultiChannelVoltageSourceIChannel']
                        instruments = ['labeq_exopy.Legacy.TinyBilt']
                Task:
                    task = 'dc_tasks:SetDCCurrentTask'
                    view = 'views.dc_views:SetDcCurrentView'
                    instruments = ['labeq_exopy.Legacy.YokogawaGS200']
                    metadata = {'loopable': True}
                Task:
                    task = 'dc_tasks:SetDCFunctionTask'
                    view = 'views.dc_views:SetDcFunctionView'
                    instruments = ['labeq_exopy.Legacy.YokogawaGS200']
                    metadata = {'loopable': True}
                Task:
                    task = 'dc_tasks:SetDCOutputTask'
                    view = 'views.dc_views:SetDcOutputView'
                    instruments = [ 'labeq_exopy.Legacy.YokogawaGS200',
                                    'labeq_exopy.Legacy.Keithley2400']
                Task:
                    task = 'spdev_tasks:DemodSPTask'
                    view = 'views.spdev_views:DemodSpView'
                    instruments = ['labeq_exopy.Legacy.SPADQ14',
                                   'labeq_exopy.Legacy.Alazar935x']
                Task:
                    task = 'run_awg:RunAWGTask'
                    view = 'views.run_awg_views:RunAWGView'
                    instruments = ['labeq_exopy.Legacy.AWG']
                Task:
                    task = 'apply_mag_field_task:ApplyMagFieldAndDropTask'
                    view = 'views.apply_mag_field_view:ApplyMagFieldAndDropView'
                    instruments = ['labeq_exopy.Legacy.IPS12010',
                                   'labeq_exopy.Legacy.CS4',
                                   'labeq_exopy.Legacy.C4G']
                    metadata = {'loopable': True}
                Task:
                    task = 'apply_mag_field_task:ApplyMagFieldTask'
                    view = 'views.apply_mag_field_view:ApplyMagFieldView'
                    instruments = ['labeq_exopy.Legacy.IPS12010',
                                   'labeq_exopy.Legacy.CS4',
                                   'labeq_exopy.Legacy.C4G']
                    metadata = {'loopable': True}

                Tasks:
                    group = 'GWINSTEKGDS1054B'
                    Task:
                        task = 'GWINSTEKGDS1054B_tasks:MeasMeanTask'
                        view = 'views.simple_measurement_view:SimpleMeasView'
                        instruments = ['labeq_exopy.Legacy.GWINSTEKGDS1054B']
                        metadata = {'loopable': True}
                    Task:
                        task = 'GWINSTEKGDS1054B_tasks:RampCursorTask'
                        view = 'views.GWINSTEKGDS1054B_views:SetRampViewGwinstek'
                        instruments = ['labeq_exopy.Legacy.GWINSTEKGDS1054B']
                        metadata = {'loopable': True}
                    
                Tasks:
                    group = "YokogawaGS200"
                    Task:
                        task = 'yokogawaGS200_tasks:SetRampTaskYoko'
                        view = 'views.yokoGS200_views:SetRampViewYoko'
                        instruments = ['labeq_exopy.Legacy.YokogawaGS200']
                        metadata = {'loopable': True}
                    Task:
                        task = 'yokogawaGS200_tasks:SetRangeTaskYoko'
                        view = 'views.yokoGS200_views:SetRangeViewYoko'
                        instruments = ['labeq_exopy.Legacy.YokogawaGS200']
                        metadata = {'loopable': True}
                        
                    Task:
                        task = 'yokogawaGS200_tasks:SetComplianceTaskYoko'
                        view = 'views.yokoGS200_views:SetComplianceViewYoko'
                        instruments = ['labeq_exopy.Legacy.YokogawaGS200']
                        metadata = {'loopable': True}
                Tasks:
                    group = "Lakeshore"
                    Task:
                        task = 'Lakeshore_TC340_tasks:LakeshoreTC340MeasureTask'
                        view = 'views.Lakeshore_TC340_views:LakeshoreTC340MeasureView'
                        instruments = ['labeq_exopy.Legacy.LakeshoreTC340']
                        metadata = {'loopable': True}
                    Task:
                        task = 'Lakeshore_TC340_tasks:LakeshoreTC340ConfigureTask'
                        view = 'views.Lakeshore_TC340_views:LakeshoreTC340ConfigureView'
                        instruments = ['labeq_exopy.Legacy.LakeshoreTC340']
                        metadata = {'loopable': True}
                    Task:
                        task = 'Lakeshore_TC340_tasks:LakeshoreTC340HeaterSetpointAndRangeTask'
                        view = 'views.Lakeshore_TC340_views:LakeshoreTC340HeaterSetpointAndRangeView'
                        instruments = ['labeq_exopy.Legacy.LakeshoreTC340']
                        metadata = {'loopable': True}
                Tasks:
                    group = "KeysightEDUX1052G"
                    Task:
                        task = 'keysight_edux1052g_tasks:KeysightEDUX1052GConfigureTask'
                        view = 'views.keysight_edux1052g_views:KeysightEDUX1052GConfigureView'
                        instruments = ['labeq_exopy.Legacy.keysight_edux1052g']
                        metadata = {'loopable': True}
                    Task:
                        task = 'keysight_edux1052g_tasks:KeysightEDUX1052GMeasureTask'
                        view = 'views.keysight_edux1052g_views:KeysightEDUX1052GMeasureView'
                        instruments = ['labeq_exopy.Legacy.keysight_edux1052g']
                        metadata = {'loopable': True}
                    Task:
                        task = 'keysight_edux1052g_tasks:KeysightEDUX1052GGetImageTask'
                        view = 'views.keysight_edux1052g_views:KeysightEDUX1052GGetImageView'
                        instruments = ['labeq_exopy.Legacy.keysight_edux1052g']
                        metadata = {'loopable': True}
                