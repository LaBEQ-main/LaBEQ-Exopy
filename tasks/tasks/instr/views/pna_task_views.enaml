# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2015-2018 by ExopyHqcLegacy Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""Views for the PNA tasks.

"""
import re
from textwrap import fill

from atom.api import set_default, Value, observe
from enaml.core.api import Conditional
from enaml.layout.api import grid, vbox, hbox, factory
from enaml.widgets.api import (GroupBox, Label, Field, ObjectCombo, Container,
                               CheckBox)
from enaml.stdlib.fields import IntField, FloatField
from enaml.validator import Validator

from exopy.tasks.api import EVALUATER_TOOLTIP
from exopy.utils.widgets.qt_completers import QtLineCompleter
from exopy_hqc_legacy.utils.layouts import auto_grid_layout
from exopy_hqc_legacy.utils.widgets.pair_editor import PairEditor
from ...base_instr_view import InstrView


enamldef IPNAChannelLabel(Label):
    """Label for the channel selection.

    """
    attr interface
    attr root
    attr index = 2
    text = 'Channel'


enamldef IPNAChannelValue(IntField):
    """Value for the channel selection.

    """
    attr interface
    attr root
    hug_width = 'strong'
    value := interface.channel


enamldef IPNAPortLabel(Label):
    """Label for the port selection.

    """
    attr interface
    attr root
    text = 'Port'


enamldef IPNAPortValue(IntField):
    """Value for the port selection.

    """
    attr interface
    attr root
    hug_width = 'strong'
    value := interface.port


MODES = {'Raw': '', 'Mag lin': 'MLIN', 'Mag log': 'MLOG', 'Phase': 'PHAS',
         'Real part': 'REAL','Imaginary part': 'IMAG'}


class SParametersValidator(Validator):
    """Validator for the S-parameter definition.

    """
    #: Pattren that the S-parameter should match.
    pattern = Value(default=re.compile('S[1-4][1-4]'))

    #: Message displayed if the S-parameter is incorrect.
    message = set_default("S parameters are of the form : Sij with i, j "
                          "in[1,4].")

    def validate(self, text):
        """Validate the input of the text field.

        """
        return self.pattern.match(text)


enamldef MeasField(Container):
    """Measure editor used as content for DictEditor.

    """
    #: Pair model passed by the DictEditor
    attr model

    padding = 0
    constraints = [hbox(field, combo)]

    Field: field:
        text := model.key
        validator = SParametersValidator()
        tool_tip = fill("Measure should be described by the parameter to "
                        "measure. ex : S21.")

    ObjectCombo: combo:
        items = list(MODES)
        selected << [k for k,v in MODES.items() if v == model.value][0]
        selected::
            model.value = MODES[change['value']]
        tool_tip = fill(
            "Choose the format in which to display and read the measures. "
            "In 'Raw' the measurement will return a complex number.")


enamldef PNASinglePointView(InstrView): view:
    """View for for the PNASinglePointTask.

    """

    constraints = [vbox(
                    grid([instr_label, cha_lab, if_lab, win_lab],
                         [instr_selection, cha_val, if_val, win_val]),
                    meas),
                    cha_val.width == if_val.width,
                    if_val.width == win_val.width]

    Label: cha_lab:
        text = 'Channel'
    IntField: cha_val:
        value := task.channel

    Label: if_lab:
        text = 'IF bandwidth (Hz)'
    IntField: if_val:
        value := task.if_bandwidth

    Label: win_lab:
        text = 'Window'
    IntField: win_val:
        value := task.window

    GroupBox: meas:
        title = 'Measures'
        padding = 1
        PairEditor(MeasField): ed:
            ed.iterable := task.measures
            ed.operations = ('add', 'move', 'remove')
            ed.alignment = 'v_center'


def label_maker(label, mode):
    """Make a label based on the selected sweep mode.

    """
    if mode == 'Frequency':
        return label + '(Hz)'
    else:
        return label + '(dBm)'


enamldef PNASweepMeasView(InstrView): view:
    """View for the PNASweepMeasTask.

    """
    constraints = [vbox(
                    grid([instr_label, cha_lab, if_lab, win_lab],
                         [instr_selection, cha_val, if_val, win_val]),
                    grid([type_lab, start_lab, stop_lab, points_lab],
                         [type_val, start_val, stop_val, points_val]),
                    meas),
                    cha_val.width == if_val.width,
                    if_val.width == win_val.width,
                    start_val.width == stop_val.width]

    Label: cha_lab:
        text = 'Channel'
    IntField: cha_val:
        value := task.channel

    Label: type_lab:
        text = 'Type'
    ObjectCombo: type_val:
        items << list(task.get_member('sweep_type').items)
        selected := task.sweep_type

    Label: if_lab:
        text = 'IF bandwidth (Hz)'
    IntField: if_val:
        value := task.if_bandwidth

    Label: win_lab:
        text = 'Window'
    IntField: win_val:
        value := task.window

    Label: start_lab:
        text << label_maker('Start', task.sweep_type)
    QtLineCompleter: start_val:
        text := task.start
        entries_updater << task.list_accessible_database_entries
        tool_tip = EVALUATER_TOOLTIP

    Label: stop_lab:
        text << label_maker('Stop', task.sweep_type)
    QtLineCompleter: stop_val:
        text := task.stop
        entries_updater << task.list_accessible_database_entries
        tool_tip = EVALUATER_TOOLTIP

    Label: points_lab:
        text = 'Points'
    QtLineCompleter: points_val:
        text := task.points
        entries_updater << task.list_accessible_database_entries
        tool_tip = EVALUATER_TOOLTIP

    GroupBox: meas:
        title = 'Measures'
        padding = 1
        PairEditor(MeasField): ed:
            ed.iterable := task.measures
            ed.operations = ('add', 'move', 'remove')
            ed.alignment = 'v_center'


enamldef PNAGetTraceView(InstrView): view:
    """View for the PNAGetTraceTask.

    """
    constraints = [factory(auto_grid_layout)]

    Label: tracelist_lab:
        text = 'Traces'
    Field: tracelist_val:
        text := task.tracelist
        tool_tip = fill("The list of traces to be measured must be entered "
                        "in the following formatch1,tr1;ch2,tr2;ch3,tr3;... "
                        "ex: 1,1;1,3 for ch1, tr1 and ch1, tr3")

    Label: already_measured_lab:
        text = 'Already measured'
    CheckBox: already_measured_val:
        checked := task.already_measured
        tool_tip = fill("Check if you do not want to run a new measurement "
                        "before recording what is on the PNA screen.")


enamldef ZNBGetTraceView(InstrView): view:
    """View for the ZNBGetTraceTask.

    """
    constraints = [factory(auto_grid_layout)]
